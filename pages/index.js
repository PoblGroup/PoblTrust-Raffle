import Head from 'next/head'
import Image from 'next/image'
import { useCallback, useEffect, useRef, useState } from 'react'
import shuffle from 'lodash/shuffle';
import Confetti from 'react-confetti';
import { ColorRing } from  'react-loader-spinner'

// import FetchNames from '../data'

export default function Home() {
  const [initialLoad, setInitialLoad] = useState(false);
  const [names, setNames] = useState(null)
  const [showConfetti, setShowConfetti] = useState(false);
  const [wraffling, setWraffling] = useState(false);
  const [windowHeight, setWindowHeight] = useState(null);
  const [windowWidth, setWindowWidth] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const confettiWrapper = useRef(null);

  const FetchNames = async () => {
    var requestOptions = {
        method: 'POST',
        redirect: 'follow'
      };
      
    const response = await fetch("https://prod-18.uksouth.logic.azure.com:443/workflows/37921d8a85c14d1da3dfcddbe071d838/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=d9T5BH6zMWe7smUcpXe6hPLSNZKohWfSLY1wSQVP1iI", requestOptions)
    const result = await response.json()
    return result
  }

  const UpdateWinner = async winner => {
    var myHeaders = new Headers();
    myHeaders.append("Content-Type", "application/json");

    var raw = JSON.stringify(winner);

    var requestOptions = {
      method: 'POST',
      headers: myHeaders,
      body: raw,
      redirect: 'follow'
    };

    const response = await fetch("https://prod-05.uksouth.logic.azure.com:443/workflows/a08e1b2afbd9489ea85a6f2d7351d641/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=PxwOcqpqbQyxRfXH9o2qSxF_3tRFfmibQ_FP6cu14x0", requestOptions)
    const result = await response.json()
    console.log(result)
  }

  const restartRaffle = () => {
    setIsLoading(true)
    setInitialLoad(false);
    setWraffling(false);
    setShowConfetti(false);
    FetchNames().then(n => {
      setNames(n)
      setIsLoading(false)
    })
  }

  const startRaffle = useCallback(() => {
      if (names.length <= 1) {
        setWraffling(true);
        setShowConfetti(true);
        //TODO: Update as Winner - Matching record in SP
        UpdateWinner(names[0])
        return
      }

      const randomIndex = Math.floor(Math.random() * names.length)
      const filterOutNames = names.filter(n => n !== names[randomIndex])
      setNames(filterOutNames)
      setInitialLoad(true);
    },[names]
  )

  useEffect(() => {
    if (initialLoad) {
      const filteringTimer = setTimeout(() => {
        startRaffle();
      }, 400);
      return () => {
        clearTimeout(filteringTimer);
      };
    }
  }, [initialLoad, names, startRaffle]);
  
  useEffect(() => {
    setWindowHeight(confettiWrapper.current.clientHeight - 10);
    setWindowWidth(confettiWrapper.current.clientWidth);
    FetchNames().then(n => {
      if (n.length == 0) {
        setError({ message: "No Raffle Names Found"})
      }
      setNames(n)
      setIsLoading(false)
    })
  }, []);

  return (
    <>
      <Head>
        <title>Pobl Trust Raffle</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className='bg-image bg-slate-900 text-white h-screen w-screen flex flex-col items-center p-8' ref={confettiWrapper}>
        <h1 className='text-4xl font-bold'>
          Thank You! Raffle is now closed. Contact Pobl Trust for more information.
          {/* <span className='text-sm text-gray-500'>by Pobl Trust</span> */}
        </h1>

        {/* {!initialLoad && !isLoading && (
        <div className='w-full flex flex-row justify-center items-center gap-3 mt-6'>
          <button
            onClick={startRaffle} 
            className='text-white rounded-md bg-emerald-500 hover:bg-emerald-600 hover:shadow-lg py-2 px-3 mt-4 mr-2 flex items-center justify-center gap-2'>
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
              <path strokeLinecap="round" strokeLinejoin="round" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              <path strokeLinecap="round" strokeLinejoin="round" d="M15.91 11.672a.375.375 0 010 .656l-5.603 3.113a.375.375 0 01-.557-.328V8.887c0-.286.307-.466.557-.327l5.603 3.112z" />
            </svg>
            Start Raffle
          </button>
          <button
            onClick={() => setNames(shuffle(names))} 
            className='text-white rounded-md bg-slate-800 hover:bg-slate-800/50 hover:shadow-lg py-2 px-3 mt-4 mr-2 flex items-center justify-center gap-2'>Shuffle</button>
        </div>
        )}

        {wraffling && (
          <Confetti
            recycle={showConfetti}
            numberOfPieces={80}
            width={windowWidth}
            height={windowHeight}
          />
        )}

        <div className='flex flex-row flex-wrap justify-center items-center mt-16 w-full sm:w-2/3'>
        {isLoading ? 
        (
          <div className='flex flex-col justify-center items-center'>
            <ColorRing
              visible={true}
              height="80"
              width="80"
              ariaLabel="blocks-loading"
              wrapperStyle={{}}
              wrapperClass="blocks-wrapper"
              colors={['#059669', '#0284c7', '#4f46e5', '#9333ea', '#c026d3']}
            />
            <p>Fetching potential winners...</p>
          </div>
        ) : 
        (
          names && names.map((n, i) => (
            <div key={i} className='rounded-lg text-center bg-pink-600 px-4 py-2 m-2'>
              <span>{n.Name}</span>
            </div>
          ))
        )}
        </div>

        <div>
        {showConfetti && (
          <div className="flex flex-col justify-center items-center gap-3">
            <h1 className='text-3xl font-bold my-4'>Congratulations! You have won!</h1>
            <button className="bg-slate-800 rounded-lg p-3 flex flex-row justify-center items-center gap-2" onClick={restartRaffle}>
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                <path strokeLinecap="round" strokeLinejoin="round" d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0013.803-3.7M4.031 9.865a8.25 8.25 0 0113.803-3.7l3.181 3.182m0-4.991v4.99" />
              </svg>
            Replay Raffle
            </button>
          </div>
        )}
        </div> */}

      </div>
    </>
  )
}
